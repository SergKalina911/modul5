"""
                                        Елементи функціонального програмування

                    Функція як об'єкт першого класу

    У програмуванні поняття "функція як об'єкт першого класу" означає, що функції в мові програмування 
використовуються як звичайні об'єкти. Це означає, що функції можна присвоювати змінним, передавати як аргументи 
іншим функціям, повертати як результати інших функцій, а також зберігати в структурах даних, таких як списки, 
словники або класи.
    На практиці це означає, що ми можемо працювати з функціями у Python точно так, як з будь-якими іншими типами 
даних.
    Перше, це присвоїмо функцію змінній.                                    
"""
def my_function():
    print("Hello, world!")

f = my_function
f()
"""
    Тут ми викликаємо не саму функцію, а змінну f(), що призводить до такого самого результату, ніби ми викликали 
саму функцію my_function()

Виведення: Hello, world!

    Функції можуть бути аргументами інших функцій. Припустимо, у нас є декілька функцій для обчислення різних 
математичних операцій. Ми можемо створити функцію apply_operation, яка приймає іншу функцію, як аргумент та 
використовує її для обчислення результату.
"""
from typing import Callable

def add(a: int, b: int) -> int:
    return a + b

def multiply(a: int, b: int) -> int:
    return a * b

def apply_operation(a: int, b: int, operation: Callable[[int, int], int]) -> int:
    return operation(a, b)

# Використання
result_add = apply_operation(5, 3, add)
result_multiply = apply_operation(5, 3, multiply)

print(result_add, result_multiply)
"""
Виведення: 8 15

    Коли ми додаємо функцію як аргумент, щоб додати типізацію до цих функцій у Python, використовуються анотації 
типів з модуля typing. Функція apply_operation має, вже знайомі нам анотації типів для a та b, а ось для параметра 
operation анотована як Callable[[int, int], int]. Це означає, що параметр operation це функція, яка приймає два цілі 
числа та повертає ціле число.
    Функції як об'єкт першого класу можуть повертають інші функції. Наприклад, ми можемо створити функцію, яка 
генерує іншу функцію для підняття числа до заданого степеня."""
from typing import Callable

def power(exponent: int) -> Callable[[int], int]:
    def inner(base: int) -> int:
        return base ** exponent
    return inner

# Використання
square = power(2)
cube = power(3)

print(square(4)) 
print(cube(4))
""" Функція power приймає один аргумент exponent і повертає внутрішню функцію inner. Внутрішня функція inner приймає 
base і використовує збережений exponent для обчислення base ** exponent.
    Коли ми викликаємо power(2), то фактично створюємо нову функцію square, для якої exponent має значення 2. 
Аналогічно, power(3) створює функцію cube, де exponent має значення 3.
    Коли відбувається виклик square(4), внутрішня функція inner обчислює 4 ** 2, що повертає 16. Так само cube(4) 
обчислює 4 ** 3, що повертає 64.

Виведення:

16
64

    І останнє: це зберігання функцій у структурах даних. Наприклад, створимо словник, де ключами будуть назви 
операцій, а значеннями — відповідні функції. """
from typing import Callable, Dict

# Визначення функцій
def add(a: int, b: int) -> int:
    return a + b

def multiply(a: int, b: int) -> int:
    return a * b

def power(exponent: int) -> Callable[[int], int]:
    def inner(base: int) -> int:
        return base ** exponent
    return inner

# Використання power для створення функцій square та cube
square = power(2)
cube = power(3)

# Словник операцій
operations: Dict[str, Callable] = {
    'add': add,
    'multiply': multiply,
    'square': square,
    'cube': cube
}

# Використання операцій
result_add = operations['add'](10, 20)  # 30
result_square = operations['square'](5)  # 25

print(result_add)  
print(result_square)  
""" Наш словник operations містить посилання на всі чотири наші функції. І тепер через operations виконуються 
операції add або square з відповідними аргументами. Де ключ словника це назва наших функцій.

30
25

    Зверніть увагу, що тип Dict[str, Callable] означає словник, де ключі - це строки, а значення - це об'єкти, що 
можна викликати. У контексті operations: Dict[str, Callable] це означає, що словник містить назви операцій і 
посилання на функції, які виконують ці операції.
    Таким чином, з функціями у Python можна працювати так само, як і з будь-якими іншими об'єктами. Це відкриває 
перед розробником безліч можливостей, про які ми поговоримо далі.  """
